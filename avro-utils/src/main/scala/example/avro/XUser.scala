/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package example.avro

import org.apache.avro.data.RecordBuilder
import org.apache.avro.io.{ DatumReader, DatumWriter }
import org.apache.avro.specific.{ SpecificData, SpecificRecordBuilderBase }
import org.apache.avro.message.BinaryMessageEncoder
import org.apache.avro.message.BinaryMessageDecoder
import org.apache.avro.message.SchemaStore
import org.apache.avro.Schema
import java.nio.ByteBuffer
import org.apache.avro.specific.SpecificRecordBase
import org.apache.avro.specific.SpecificRecord
import org.apache.avro.AvroRuntimeException
import java.io.ObjectOutput
import java.io.ObjectInput
import org.apache.spark.sql.catalyst.DefinedByConstructorParams

@SuppressWarnings(Array("all"))
@org.apache.avro.specific.AvroGenerated
@SerialVersionUID(-3588479540582100558L)
object XUser {
  val SCHEMA$: Schema = new Schema.Parser().parse("{\"type\":\"record\",\"name\":\"XUser\",\"namespace\":\"example.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"favorite_number\",\"type\":[\"int\",\"null\"]},{\"name\":\"favorite_color\",\"type\":[\"string\",\"null\"]}]}")

  def getClassSchema: Schema = SCHEMA$

  private val MODEL$ = new SpecificData
  private val ENCODER = new BinaryMessageEncoder[XUser](MODEL$, SCHEMA$)
  private val DECODER = new BinaryMessageDecoder[XUser](MODEL$, SCHEMA$)

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  def getDecoder: BinaryMessageDecoder[XUser] = DECODER

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   *
   * @param resolver a { @link SchemaStore} used to find schemas by fingerprint
   */
  def createDecoder(resolver: SchemaStore) = new BinaryMessageDecoder[XUser](MODEL$, SCHEMA$, resolver)

  /** Deserializes a XUser from a ByteBuffer. */
  @throws[java.io.IOException]
  def fromByteBuffer(b: ByteBuffer): XUser = DECODER.decode(b)

  /**
   * Creates a new XUser RecordBuilder.
   *
   * @return A new XUser RecordBuilder
   */
  def newBuilder() = new XUser.Builder()

  /**
   * Creates a new XUser RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new XUser RecordBuilder
   */
  def newBuilder(other: XUser.Builder) = new XUser.Builder(other)

  /**
   * Creates a new XUser RecordBuilder by copying an existing XUser instance.
   *
   * @param other The existing instance to copy.
   * @return A new XUser RecordBuilder
   */
  def newBuilder(other: XUser) = new XUser.Builder(other)

  /**
   * RecordBuilder for XUser instances.
   */
  class Builder //private()

    /** Creates a new Builder */
    extends SpecificRecordBuilderBase[XUser](SCHEMA$) with RecordBuilder[XUser] {
    import org.apache.avro.data.RecordBuilderBase

    private var name: String = null.asInstanceOf[String]
    private var favorite_number: Int = null.asInstanceOf[Int]
    private var favorite_color: String = null.asInstanceOf[String]

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    def this(other: XUser.Builder) {
      this()
      //super (other)
      if (RecordBuilderBase.isValidValue(fields()(0), other.name)) {
        this.name = data.deepCopy(fields()(0).schema, other.name)
        fieldSetFlags()(0) = true
      }
      if (RecordBuilderBase.isValidValue(fields()(1), other.favorite_number)) {
        this.favorite_number = data.deepCopy(fields()(1).schema, other.favorite_number)
        fieldSetFlags()(1) = true
      }
      if (RecordBuilderBase.isValidValue(fields()(2), other.favorite_color)) {
        this.favorite_color = data.deepCopy(fields()(2).schema, other.favorite_color)
        fieldSetFlags()(2) = true
      }
    }

    /**
     * Creates a Builder by copying an existing XUser instance
     *
     * @param other The existing instance to copy.
     */
    def this(other: XUser) {
      this()
      //super (SCHEMA$)
      if (RecordBuilderBase.isValidValue(fields()(0), other.name)) {
        this.name = data.deepCopy(fields()(0).schema, other.name)
        fieldSetFlags()(0) = true
      }
      if (RecordBuilderBase.isValidValue(fields()(1), other.favorite_number)) {
        this.favorite_number = data.deepCopy(fields()(1).schema, other.favorite_number)
        fieldSetFlags()(1) = true
      }
      if (RecordBuilderBase.isValidValue(fields()(2), other.favorite_color)) {
        this.favorite_color = data.deepCopy(fields()(2).schema, other.favorite_color)
        fieldSetFlags()(2) = true
      }
    }

    /**
     * Gets the value of the 'name' field.
     *
     * @return The value.
     */
    def getName: String = name

    /**
     * Sets the value of the 'name' field.
     *
     * @param value The value of 'name'.
     * @return This builder.
     */
    def setName(value: String): XUser.Builder = {
      validate(fields()(0), value)
      this.name = value
      fieldSetFlags()(0) = true
      this
    }

    /**
     * Checks whether the 'name' field has been set.
     *
     * @return True if the 'name' field has been set, false otherwise.
     */
    def hasName: Boolean = fieldSetFlags()(0)

    /**
     * Clears the value of the 'name' field.
     *
     * @return This builder.
     */
    def clearName: XUser.Builder = {
      name = null.asInstanceOf[String]
      fieldSetFlags()(0) = false
      this
    }

    /**
     * Gets the value of the 'favorite_number' field.
     *
     * @return The value.
     */
    def getFavoriteNumber: Integer = favorite_number

    /**
     * Sets the value of the 'favorite_number' field.
     *
     * @param value The value of 'favorite_number'.
     * @return This builder.
     */
    def setFavoriteNumber(value: Integer): XUser.Builder = {
      validate(fields()(1), value)
      this.favorite_number = value
      fieldSetFlags()(1) = true
      this
    }

    /**
     * Checks whether the 'favorite_number' field has been set.
     *
     * @return True if the 'favorite_number' field has been set, false otherwise.
     */
    def hasFavoriteNumber: Boolean = fieldSetFlags()(1)

    /**
     * Clears the value of the 'favorite_number' field.
     *
     * @return This builder.
     */
    def clearFavoriteNumber: XUser.Builder = {
      favorite_number = null.asInstanceOf[Int]
      fieldSetFlags()(1) = false
      this
    }

    /**
     * Gets the value of the 'favorite_color' field.
     *
     * @return The value.
     */
    def getFavoriteColor: String = favorite_color

    /**
     * Sets the value of the 'favorite_color' field.
     *
     * @param value The value of 'favorite_color'.
     * @return This builder.
     */
    def setFavoriteColor(value: String): XUser.Builder = {
      validate(fields()(2), value)
      this.favorite_color = value
      fieldSetFlags()(2) = true
      this
    }

    /**
     * Checks whether the 'favorite_color' field has been set.
     *
     * @return True if the 'favorite_color' field has been set, false otherwise.
     */
    def hasFavoriteColor: Boolean = fieldSetFlags()(2)

    /**
     * Clears the value of the 'favorite_color' field.
     *
     * @return This builder.
     */
    def clearFavoriteColor: XUser.Builder = {
      favorite_color = null.asInstanceOf[String]
      fieldSetFlags()(2) = false
      this
    }

    @SuppressWarnings(Array("unchecked")) override def build: XUser = try {
      new XUser(
        if (fieldSetFlags()(0)) this.name else defaultValue(fields()(0)).asInstanceOf[String],
        if (fieldSetFlags()(1)) this.favorite_number else defaultValue(fields()(1)).asInstanceOf[Integer],
        if (fieldSetFlags()(2)) this.favorite_color else defaultValue(fields()(2)).asInstanceOf[String])
    } catch {
      case e: Exception =>
        throw new AvroRuntimeException(e)
    }
  }

  @SuppressWarnings(Array("unchecked")) private val WRITER$ = MODEL$.createDatumWriter(SCHEMA$).asInstanceOf[DatumWriter[XUser]]
  @SuppressWarnings(Array("unchecked")) private val READER$ = MODEL$.createDatumReader(SCHEMA$).asInstanceOf[DatumReader[XUser]]
}

@SuppressWarnings(Array("all"))
@org.apache.avro.specific.AvroGenerated
@SerialVersionUID(-3588479540582100558L)
class XUser(var name: String, var favorite_number: Integer, var favorite_color: String)

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  extends SpecificRecordBase with SpecificRecord with DefinedByConstructorParams {
  /** Serializes this XUser to a ByteBuffer. */
  @throws[java.io.IOException]
  def toByteBuffer: ByteBuffer = XUser.ENCODER.encode(this)

  override def getSchema: Schema = XUser.SCHEMA$

  // Used by DatumWriter.  Applications should not call.
  override def get(field$: Int): Object = field$ match {
    case 0 =>
      name
    case 1 =>
      favorite_number
    case 2 =>
      favorite_color
    case _ =>
      throw new AvroRuntimeException("Bad index")
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = Array("unchecked")) override def put(field$: Int, value$: Object): Unit = {
    field$ match {
      case 0 =>
        name = value$.asInstanceOf[String]
      case 1 =>
        favorite_number = value$.asInstanceOf[Integer]
      case 2 =>
        favorite_color = value$.asInstanceOf[String]
      case _ =>
        throw new AvroRuntimeException("Bad index")
    }
  }

  /**
   * Gets the value of the 'name' field.
   *
   * @return The value of the 'name' field.
   */
  def getName: String = name

  /**
   * Sets the value of the 'name' field.
   *
   * @param value the value to set.
   */
  def setName(value: String): Unit = {
    this.name = value
  }

  /**
   * Gets the value of the 'favorite_number' field.
   *
   * @return The value of the 'favorite_number' field.
   */
  def getFavoriteNumber: Integer = favorite_number

  /**
   * Sets the value of the 'favorite_number' field.
   *
   * @param value the value to set.
   */
  def setFavoriteNumber(value: Integer): Unit = {
    this.favorite_number = value
  }

  /**
   * Gets the value of the 'favorite_color' field.
   *
   * @return The value of the 'favorite_color' field.
   */
  def getFavoriteColor: String = favorite_color

  /**
   * Sets the value of the 'favorite_color' field.
   *
   * @param value the value to set.
   */
  def setFavoriteColor(value: String): Unit = {
    this.favorite_color = value
  }

  @throws[java.io.IOException]
  override def writeExternal(out: ObjectOutput): Unit = {
    XUser.WRITER$.write(this, SpecificData.getEncoder(out))
  }

  @throws[java.io.IOException]
  override def readExternal(in: ObjectInput): Unit = {
    XUser.READER$.read(this, SpecificData.getDecoder(in))
  }
}
